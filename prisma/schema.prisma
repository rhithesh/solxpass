generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?   @map("email_verified")
  image          String?
  hashedPassword String?
  // proofs         Proof[]
  // signatures     Signature[]
  tier           String      @default("1")
  range          String      @default("1")
  score          Int         @default(0)
  providers      String[]
  bookmarks      Bookmark[]
  tweets         Tweets[]
  followers      String[]
  topics         String[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Tweets {
  id String @id @default(cuid())
  tweet String
  image String?
  topic String?
  likes Int?
  score Int?
  bookmarks Bookmark[]
  comments String?
  profile_image String?
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id String @id @default(cuid())
  tweetId String
  tweet Tweets @relation(fields: [tweetId], references: [id])
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Proof {
//   id         String   @id @default(uuid()) // Unique identifier for the proof
//   signature  String? // Signature from the proof
//   epoch      String // Epoch from claimData
//   identifier String // Identifier from claimData
//   context    String // Context from claimData
//   parameters String? // Parameters from claimData (this can be JSON)
//   provider   String // Provider from claimData
//   timestamp  DateTime @map("timestamp") // Timestamp in seconds, should be converted to DateTime
//   owner      String // Owner from claimData
//   witnessID  String // Witness ID from witness
//   witnessUrl String // Witness URL from witness

//   // Relation fields
//   signatures Signature[] // One-to-many relation to signatures
//   user       User?       @relation(fields: [userId], references: [id])
//   userId     String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Signature {
//   id      String @id @default(uuid()) // Unique identifier for the signature
//   value   String // Signature value
//   proofId String // Foreign key reference to Proof model
//   proof   Proof  @relation(fields: [proofId], references: [id])
//   user    User   @relation(fields: [userId], references: [id])
//   userId  String
// }
